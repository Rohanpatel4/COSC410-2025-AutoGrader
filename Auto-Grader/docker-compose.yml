version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: infra/docker/backend.Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./app.db
      - UPLOAD_DIR=./uploads
      - RUNS_DIR=./runs
      - MAX_UPLOAD_SIZE=26214400
      - BACKEND_CORS_ORIGINS=["http://localhost:5173"]
    volumes:
      - backend_data:/app
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/runtimes/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: infra/docker/frontend.Dockerfile
    ports:
      - "8080:80"
    environment:
      - VITE_API_URL=/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Optional PostgreSQL service (uncomment to use PostgreSQL instead of SQLite)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_DB=autograder
  #     - POSTGRES_USER=autograder
  #     - POSTGRES_PASSWORD=autograder
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - app_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U autograder"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: unless-stopped

volumes:
  backend_data:
  # postgres_data:

networks:
  app_network:
    driver: bridge
